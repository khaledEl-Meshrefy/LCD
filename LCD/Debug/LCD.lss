
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007a  0080007a  0000073e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d0a  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ee  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f68  00000000  00000000  00004376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000052de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
  8a:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <isPressedD>:
void resetPinC (int  pinnumber){
	PORTC &=!(1<<pinnumber);
}

void togglePinC (int  pinnumber){
	PORTC ^=(1<<pinnumber);
  92:	20 b3       	in	r18, 0x10	; 16
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	a9 01       	movw	r20, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <isPressedD+0xc>
  9a:	55 95       	asr	r21
  9c:	47 95       	ror	r20
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <isPressedD+0x8>
  a2:	ca 01       	movw	r24, r20
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	99 27       	eor	r25, r25
  a8:	08 95       	ret

000000aa <setPinD>:
  aa:	92 b3       	in	r25, 0x12	; 18
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <setPinD+0xc>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <setPinD+0x8>
  ba:	29 2b       	or	r18, r25
  bc:	22 bb       	out	0x12, r18	; 18
  be:	08 95       	ret

000000c0 <resetPinD>:
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <resetPinD+0xc>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <resetPinD+0x8>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	22 bb       	out	0x12, r18	; 18
  d6:	08 95       	ret

000000d8 <getkeypad>:
}

char getkeypad(){
	while(1){
	setPinD(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
	setPinD(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
	setPinD(2);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
	if (isPressedD(4))
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
  f8:	89 2b       	or	r24, r25
  fa:	09 f4       	brne	.+2      	; 0xfe <getkeypad+0x26>
  fc:	4b c0       	rjmp	.+150    	; 0x194 <getkeypad+0xbc>
	{
		setPinD(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(1);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(2);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(4))
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 11e:	89 2b       	or	r24, r25
 120:	09 f0       	breq	.+2      	; 0x124 <getkeypad+0x4c>
 122:	2d c1       	rjmp	.+602    	; 0x37e <getkeypad+0x2a6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	97 e2       	ldi	r25, 0x27	; 39
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <getkeypad+0x50>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <getkeypad+0x56>
 12e:	00 00       	nop
			
			return '1';
			
		}
		_delay_ms(40);
		resetPinD(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(2);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(4))
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 150:	89 2b       	or	r24, r25
 152:	09 f0       	breq	.+2      	; 0x156 <getkeypad+0x7e>
 154:	16 c1       	rjmp	.+556    	; 0x382 <getkeypad+0x2aa>
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	97 e2       	ldi	r25, 0x27	; 39
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <getkeypad+0x82>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <getkeypad+0x88>
 160:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(2);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		if (isPressedD(4))
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 182:	89 2b       	or	r24, r25
 184:	09 f0       	breq	.+2      	; 0x188 <getkeypad+0xb0>
 186:	ff c0       	rjmp	.+510    	; 0x386 <getkeypad+0x2ae>
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	97 e2       	ldi	r25, 0x27	; 39
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <getkeypad+0xb4>
 190:	00 c0       	rjmp	.+0      	; 0x192 <getkeypad+0xba>
 192:	00 00       	nop
		
		
		

	}
	if (isPressedD(5))
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 19c:	89 2b       	or	r24, r25
 19e:	09 f4       	brne	.+2      	; 0x1a2 <getkeypad+0xca>
 1a0:	4b c0       	rjmp	.+150    	; 0x238 <getkeypad+0x160>
	{
		setPinD(0);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(2);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(5))
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 1c2:	89 2b       	or	r24, r25
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <getkeypad+0xf0>
 1c6:	e1 c0       	rjmp	.+450    	; 0x38a <getkeypad+0x2b2>
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	97 e2       	ldi	r25, 0x27	; 39
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <getkeypad+0xf4>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <getkeypad+0xfa>
 1d2:	00 00       	nop
			
			return '4';
			
		}
		_delay_ms(40);
		resetPinD(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(1);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(2);
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(5))
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 1f4:	89 2b       	or	r24, r25
 1f6:	09 f0       	breq	.+2      	; 0x1fa <getkeypad+0x122>
 1f8:	ca c0       	rjmp	.+404    	; 0x38e <getkeypad+0x2b6>
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	97 e2       	ldi	r25, 0x27	; 39
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <getkeypad+0x126>
 202:	00 c0       	rjmp	.+0      	; 0x204 <getkeypad+0x12c>
 204:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(1);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(2);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		if (isPressedD(5))
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 226:	89 2b       	or	r24, r25
 228:	09 f0       	breq	.+2      	; 0x22c <getkeypad+0x154>
 22a:	b3 c0       	rjmp	.+358    	; 0x392 <getkeypad+0x2ba>
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	97 e2       	ldi	r25, 0x27	; 39
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <getkeypad+0x158>
 234:	00 c0       	rjmp	.+0      	; 0x236 <getkeypad+0x15e>
 236:	00 00       	nop
			
			
		}
		_delay_ms(40);
	}
	if (isPressedD(6))
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 240:	89 2b       	or	r24, r25
 242:	09 f4       	brne	.+2      	; 0x246 <getkeypad+0x16e>
 244:	4b c0       	rjmp	.+150    	; 0x2dc <getkeypad+0x204>
	{
		setPinD(0);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(1);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(2);
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(6))
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 266:	89 2b       	or	r24, r25
 268:	09 f0       	breq	.+2      	; 0x26c <getkeypad+0x194>
 26a:	95 c0       	rjmp	.+298    	; 0x396 <getkeypad+0x2be>
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	97 e2       	ldi	r25, 0x27	; 39
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <getkeypad+0x198>
 274:	00 c0       	rjmp	.+0      	; 0x276 <getkeypad+0x19e>
 276:	00 00       	nop
			
			return '7';
			
		}
		_delay_ms(40);
		resetPinD(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(1);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(2);
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(6))
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 298:	89 2b       	or	r24, r25
 29a:	09 f0       	breq	.+2      	; 0x29e <getkeypad+0x1c6>
 29c:	7e c0       	rjmp	.+252    	; 0x39a <getkeypad+0x2c2>
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	97 e2       	ldi	r25, 0x27	; 39
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <getkeypad+0x1ca>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <getkeypad+0x1d0>
 2a8:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(2);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		if (isPressedD(6))
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 2ca:	89 2b       	or	r24, r25
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <getkeypad+0x1f8>
 2ce:	67 c0       	rjmp	.+206    	; 0x39e <getkeypad+0x2c6>
 2d0:	8f e0       	ldi	r24, 0x0F	; 15
 2d2:	97 e2       	ldi	r25, 0x27	; 39
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <getkeypad+0x1fc>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <getkeypad+0x202>
 2da:	00 00       	nop
			
			
		}
		_delay_ms(40);
	}
	if (isPressedD(7))
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 2e4:	89 2b       	or	r24, r25
 2e6:	09 f4       	brne	.+2      	; 0x2ea <getkeypad+0x212>
 2e8:	f7 ce       	rjmp	.-530    	; 0xd8 <getkeypad>
	{
		setPinD(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(1);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(2);
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(7))
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 30a:	89 2b       	or	r24, r25
 30c:	09 f0       	breq	.+2      	; 0x310 <getkeypad+0x238>
 30e:	49 c0       	rjmp	.+146    	; 0x3a2 <getkeypad+0x2ca>
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	97 e2       	ldi	r25, 0x27	; 39
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <getkeypad+0x23c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <getkeypad+0x242>
 31a:	00 00       	nop
			
			return '*';
			
		}
		_delay_ms(40);
		resetPinD(0);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(1);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		resetPinD(2);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		
		if (isPressedD(7))
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 33c:	89 2b       	or	r24, r25
 33e:	99 f5       	brne	.+102    	; 0x3a6 <getkeypad+0x2ce>
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	97 e2       	ldi	r25, 0x27	; 39
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <getkeypad+0x26c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <getkeypad+0x272>
 34a:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		resetPinD(1);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 60 00 	call	0xc0	; 0xc0 <resetPinD>
		setPinD(2);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 55 00 	call	0xaa	; 0xaa <setPinD>
		if (isPressedD(7))
 364:	87 e0       	ldi	r24, 0x07	; 7
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 49 00 	call	0x92	; 0x92 <isPressedD>
 36c:	89 2b       	or	r24, r25
 36e:	e9 f4       	brne	.+58     	; 0x3aa <getkeypad+0x2d2>
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	97 e2       	ldi	r25, 0x27	; 39
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <getkeypad+0x29c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <getkeypad+0x2a2>
 37a:	00 00       	nop
 37c:	ad ce       	rjmp	.-678    	; 0xd8 <getkeypad>
		resetPinD(2);
		
		if (isPressedD(4))
		{
			
			return '1';
 37e:	81 e3       	ldi	r24, 0x31	; 49
 380:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(4))
		{
			
			return '2';
 382:	82 e3       	ldi	r24, 0x32	; 50
 384:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(4))
		{
			
			return '3';
 386:	83 e3       	ldi	r24, 0x33	; 51
 388:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(5))
		{
			
			return '4';
 38a:	84 e3       	ldi	r24, 0x34	; 52
 38c:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(5))
		{
			
			return '5';
 38e:	85 e3       	ldi	r24, 0x35	; 53
 390:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(5))
		{
			
			return '6';
 392:	86 e3       	ldi	r24, 0x36	; 54
 394:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(6))
		{
			
			return '7';
 396:	87 e3       	ldi	r24, 0x37	; 55
 398:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(6))
		{
			
			return '8';
 39a:	88 e3       	ldi	r24, 0x38	; 56
 39c:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(6))
		{
			
			return '9';
 39e:	89 e3       	ldi	r24, 0x39	; 57
 3a0:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(7))
		{
			
			return '*';
 3a2:	8a e2       	ldi	r24, 0x2A	; 42
 3a4:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(7))
		{
			
			return'0';
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(7))
		{
			
			return '#';
 3aa:	83 e2       	ldi	r24, 0x23	; 35
		}
		_delay_ms(40);
	}
	}
	return '-';
}
 3ac:	08 95       	ret

000003ae <lcd_cmd>:
	value=value/10;*/
	char strNum[40];
	itoa(x,strNum,10);
	lcd_write_str4bit(strNum);
	
}
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	ab 98       	cbi	0x15, 3	; 21
 3b2:	aa 9a       	sbi	0x15, 2	; 21
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	81 ee       	ldi	r24, 0xE1	; 225
 3b8:	94 e0       	ldi	r25, 0x04	; 4
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <lcd_cmd+0xc>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_cmd+0x16>
 3c4:	00 00       	nop
 3c6:	aa 98       	cbi	0x15, 2	; 21
 3c8:	08 95       	ret

000003ca <lcd_cmd4bit>:
 3ca:	95 b3       	in	r25, 0x15	; 21
 3cc:	9f 70       	andi	r25, 0x0F	; 15
 3ce:	95 bb       	out	0x15, r25	; 21
 3d0:	95 b3       	in	r25, 0x15	; 21
 3d2:	28 2f       	mov	r18, r24
 3d4:	20 7f       	andi	r18, 0xF0	; 240
 3d6:	92 2b       	or	r25, r18
 3d8:	95 bb       	out	0x15, r25	; 21
 3da:	ab 98       	cbi	0x15, 3	; 21
 3dc:	aa 9a       	sbi	0x15, 2	; 21
 3de:	35 e0       	ldi	r19, 0x05	; 5
 3e0:	3a 95       	dec	r19
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_cmd4bit+0x16>
 3e4:	00 00       	nop
 3e6:	aa 98       	cbi	0x15, 2	; 21
 3e8:	ef e1       	ldi	r30, 0x1F	; 31
 3ea:	f3 e0       	ldi	r31, 0x03	; 3
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_cmd4bit+0x22>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_cmd4bit+0x28>
 3f2:	00 00       	nop
 3f4:	95 b3       	in	r25, 0x15	; 21
 3f6:	9f 70       	andi	r25, 0x0F	; 15
 3f8:	95 bb       	out	0x15, r25	; 21
 3fa:	25 b3       	in	r18, 0x15	; 21
 3fc:	f0 e1       	ldi	r31, 0x10	; 16
 3fe:	8f 9f       	mul	r24, r31
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	82 2b       	or	r24, r18
 406:	85 bb       	out	0x15, r24	; 21
 408:	ab 98       	cbi	0x15, 3	; 21
 40a:	aa 9a       	sbi	0x15, 2	; 21
 40c:	35 e0       	ldi	r19, 0x05	; 5
 40e:	3a 95       	dec	r19
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 00       	nop
 414:	aa 98       	cbi	0x15, 2	; 21
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9f e1       	ldi	r25, 0x1F	; 31
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	08 95       	ret

00000424 <lcd_init>:
 424:	04 97       	sbiw	r24, 0x04	; 4
 426:	a9 f4       	brne	.+42     	; 0x452 <lcd_init+0x2e>
 428:	80 ef       	ldi	r24, 0xF0	; 240
 42a:	84 bb       	out	0x14, r24	; 20
 42c:	84 b3       	in	r24, 0x14	; 20
 42e:	8c 60       	ori	r24, 0x0C	; 12
 430:	84 bb       	out	0x14, r24	; 20
 432:	88 e2       	ldi	r24, 0x28	; 40
 434:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 444:	86 e0       	ldi	r24, 0x06	; 6
 446:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 44a:	8e e0       	ldi	r24, 0x0E	; 14
 44c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 450:	08 95       	ret
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	84 bb       	out	0x14, r24	; 20
 456:	84 b3       	in	r24, 0x14	; 20
 458:	8c 60       	ori	r24, 0x0C	; 12
 45a:	84 bb       	out	0x14, r24	; 20
 45c:	88 e3       	ldi	r24, 0x38	; 56
 45e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 462:	8c e0       	ldi	r24, 0x0C	; 12
 464:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 474:	8e e0       	ldi	r24, 0x0E	; 14
 476:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_cmd>
 47a:	08 95       	ret

0000047c <lcd_write4bit>:
 47c:	95 b3       	in	r25, 0x15	; 21
 47e:	9f 70       	andi	r25, 0x0F	; 15
 480:	95 bb       	out	0x15, r25	; 21
 482:	95 b3       	in	r25, 0x15	; 21
 484:	28 2f       	mov	r18, r24
 486:	20 7f       	andi	r18, 0xF0	; 240
 488:	92 2b       	or	r25, r18
 48a:	95 bb       	out	0x15, r25	; 21
 48c:	ab 9a       	sbi	0x15, 3	; 21
 48e:	aa 9a       	sbi	0x15, 2	; 21
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	31 ee       	ldi	r19, 0xE1	; 225
 494:	94 e0       	ldi	r25, 0x04	; 4
 496:	21 50       	subi	r18, 0x01	; 1
 498:	30 40       	sbci	r19, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <lcd_write4bit+0x1a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_write4bit+0x24>
 4a0:	00 00       	nop
 4a2:	aa 98       	cbi	0x15, 2	; 21
 4a4:	95 b3       	in	r25, 0x15	; 21
 4a6:	9f 70       	andi	r25, 0x0F	; 15
 4a8:	95 bb       	out	0x15, r25	; 21
 4aa:	25 b3       	in	r18, 0x15	; 21
 4ac:	30 e1       	ldi	r19, 0x10	; 16
 4ae:	83 9f       	mul	r24, r19
 4b0:	c0 01       	movw	r24, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	82 2b       	or	r24, r18
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	ab 9a       	sbi	0x15, 3	; 21
 4ba:	aa 9a       	sbi	0x15, 2	; 21
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	91 ee       	ldi	r25, 0xE1	; 225
 4c0:	24 e0       	ldi	r18, 0x04	; 4
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	20 40       	sbci	r18, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <lcd_write4bit+0x46>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <lcd_write4bit+0x50>
 4cc:	00 00       	nop
 4ce:	aa 98       	cbi	0x15, 2	; 21
 4d0:	08 95       	ret

000004d2 <lcd_write_str4bit>:
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	fc 01       	movw	r30, r24
 4dc:	20 81       	ld	r18, Z
 4de:	21 11       	cpse	r18, r1
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <lcd_write_str4bit+0x32>
 4e2:	3f c0       	rjmp	.+126    	; 0x562 <lcd_write_str4bit+0x90>
 4e4:	00 31       	cpi	r16, 0x10	; 16
 4e6:	11 05       	cpc	r17, r1
 4e8:	81 f4       	brne	.+32     	; 0x50a <lcd_write_str4bit+0x38>
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 4f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 4f4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 4fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 502:	03 c0       	rjmp	.+6      	; 0x50a <lcd_write_str4bit+0x38>
 504:	ec 01       	movw	r28, r24
 506:	00 e0       	ldi	r16, 0x00	; 0
 508:	10 e0       	ldi	r17, 0x00	; 0
 50a:	85 b3       	in	r24, 0x15	; 21
 50c:	8f 70       	andi	r24, 0x0F	; 15
 50e:	85 bb       	out	0x15, r24	; 21
 510:	95 b3       	in	r25, 0x15	; 21
 512:	88 81       	ld	r24, Y
 514:	80 7f       	andi	r24, 0xF0	; 240
 516:	89 2b       	or	r24, r25
 518:	85 bb       	out	0x15, r24	; 21
 51a:	ab 9a       	sbi	0x15, 3	; 21
 51c:	aa 9a       	sbi	0x15, 2	; 21
 51e:	f5 e0       	ldi	r31, 0x05	; 5
 520:	fa 95       	dec	r31
 522:	f1 f7       	brne	.-4      	; 0x520 <lcd_write_str4bit+0x4e>
 524:	00 00       	nop
 526:	aa 98       	cbi	0x15, 2	; 21
 528:	8f e1       	ldi	r24, 0x1F	; 31
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <lcd_write_str4bit+0x5a>
 530:	00 c0       	rjmp	.+0      	; 0x532 <lcd_write_str4bit+0x60>
 532:	00 00       	nop
 534:	85 b3       	in	r24, 0x15	; 21
 536:	8f 70       	andi	r24, 0x0F	; 15
 538:	85 bb       	out	0x15, r24	; 21
 53a:	85 b3       	in	r24, 0x15	; 21
 53c:	99 91       	ld	r25, Y+
 53e:	e0 e1       	ldi	r30, 0x10	; 16
 540:	9e 9f       	mul	r25, r30
 542:	90 01       	movw	r18, r0
 544:	11 24       	eor	r1, r1
 546:	28 2b       	or	r18, r24
 548:	25 bb       	out	0x15, r18	; 21
 54a:	ab 9a       	sbi	0x15, 3	; 21
 54c:	aa 9a       	sbi	0x15, 2	; 21
 54e:	f5 e0       	ldi	r31, 0x05	; 5
 550:	fa 95       	dec	r31
 552:	f1 f7       	brne	.-4      	; 0x550 <lcd_write_str4bit+0x7e>
 554:	00 00       	nop
 556:	aa 98       	cbi	0x15, 2	; 21
 558:	0f 5f       	subi	r16, 0xFF	; 255
 55a:	1f 4f       	sbci	r17, 0xFF	; 255
 55c:	88 81       	ld	r24, Y
 55e:	81 11       	cpse	r24, r1
 560:	c1 cf       	rjmp	.-126    	; 0x4e4 <lcd_write_str4bit+0x12>
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <lcd_clear4bit>:
 56c:	2f ef       	ldi	r18, 0xFF	; 255
 56e:	8b e2       	ldi	r24, 0x2B	; 43
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	21 50       	subi	r18, 0x01	; 1
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	90 40       	sbci	r25, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <lcd_clear4bit+0x6>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd_clear4bit+0x10>
 57c:	00 00       	nop

void lcd_clear4bit(){
		_delay_ms(24);
		lcd_cmd4bit(0x01);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_cmd4bit>
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	8b e2       	ldi	r24, 0x2B	; 43
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <lcd_clear4bit+0x1e>
 592:	00 c0       	rjmp	.+0      	; 0x594 <lcd_clear4bit+0x28>
 594:	00 00       	nop
		_delay_ms(24);
		count=0;
 596:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 59a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 59e:	08 95       	ret

000005a0 <main>:
#include "lcd.h"
#include "functions.h"
#include <stdlib.h>

int main(void)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	2a 97       	sbiw	r28, 0x0a	; 10
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61

	DDRD |=(1<<0) |(1<<1) |(1<<2);
 5b4:	81 b3       	in	r24, 0x11	; 17
 5b6:	87 60       	ori	r24, 0x07	; 7
 5b8:	81 bb       	out	0x11, r24	; 17
	
	lcd_init(4);
 5ba:	84 e0       	ldi	r24, 0x04	; 4
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 12 02 	call	0x424	; 0x424 <lcd_init>
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	31 ee       	ldi	r19, 0xE1	; 225
 5c6:	44 e0       	ldi	r20, 0x04	; 4
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	30 40       	sbci	r19, 0x00	; 0
 5cc:	40 40       	sbci	r20, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <main+0x28>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0x32>
 5d2:	00 00       	nop
	lcd_write_num(12000);
	lcd_goto_xy_noshift(1,2);
	lcd_goto_xy_noshift(17,2);*/
	//lcd_write_str4bit("khaled mesho");

DDRC|=(1<<0);
 5d4:	a0 9a       	sbi	0x14, 0	; 20
PORTC|=(1<<0);
 5d6:	a8 9a       	sbi	0x15, 0	; 21
char pass [5];
int i=0;
char actpass[5]={'1','2','3','4','5'};
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	e0 e6       	ldi	r30, 0x60	; 96
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	de 01       	movw	r26, r28
 5e0:	16 96       	adiw	r26, 0x06	; 6
 5e2:	01 90       	ld	r0, Z+
 5e4:	0d 92       	st	X+, r0
 5e6:	8a 95       	dec	r24
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x42>
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	7c 01       	movw	r14, r24
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	15 c0       	rjmp	.+42     	; 0x620 <main+0x80>
    /* Replace with your application code */
    while (1) 
    {
		for ( ; i<5;i++){
		
		pass[i]=getkeypad();
 5f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <getkeypad>
 5fa:	f7 01       	movw	r30, r14
 5fc:	80 83       	st	Z, r24
		lcd_write4bit('*');
 5fe:	8a e2       	ldi	r24, 0x2A	; 42
 600:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_write4bit>
 604:	ff ef       	ldi	r31, 0xFF	; 255
 606:	23 ec       	ldi	r18, 0xC3	; 195
 608:	39 e0       	ldi	r19, 0x09	; 9
 60a:	f1 50       	subi	r31, 0x01	; 1
 60c:	20 40       	sbci	r18, 0x00	; 0
 60e:	30 40       	sbci	r19, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0x6a>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0x74>
 614:	00 00       	nop
 616:	0f 5f       	subi	r16, 0xFF	; 255
 618:	1f 4f       	sbci	r17, 0xFF	; 255
 61a:	4f ef       	ldi	r20, 0xFF	; 255
 61c:	e4 1a       	sub	r14, r20
 61e:	f4 0a       	sbc	r15, r20
int i=0;
char actpass[5]={'1','2','3','4','5'};
    /* Replace with your application code */
    while (1) 
    {
		for ( ; i<5;i++){
 620:	05 30       	cpi	r16, 0x05	; 5
 622:	11 05       	cpc	r17, r1
 624:	44 f3       	brlt	.-48     	; 0x5f6 <main+0x56>
 626:	ef ef       	ldi	r30, 0xFF	; 255
 628:	f0 e7       	ldi	r31, 0x70	; 112
 62a:	22 e0       	ldi	r18, 0x02	; 2
 62c:	e1 50       	subi	r30, 0x01	; 1
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	20 40       	sbci	r18, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <main+0x8c>
 634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x96>
 636:	00 00       	nop
				_delay_ms(200);

		}
		
		_delay_ms(50);
		if (i==5)
 638:	05 30       	cpi	r16, 0x05	; 5
 63a:	11 05       	cpc	r17, r1
 63c:	61 f7       	brne	.-40     	; 0x616 <main+0x76>
		{
			if (!strncmp(pass,actpass,5)){
 63e:	45 e0       	ldi	r20, 0x05	; 5
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	be 01       	movw	r22, r28
 644:	6a 5f       	subi	r22, 0xFA	; 250
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	ce 01       	movw	r24, r28
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	0e 94 38 03 	call	0x670	; 0x670 <strncmp>
 650:	89 2b       	or	r24, r25
 652:	39 f4       	brne	.+14     	; 0x662 <main+0xc2>
				lcd_clear4bit();
 654:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_clear4bit>
				lcd_write_str4bit("passed !!");
 658:	85 e6       	ldi	r24, 0x65	; 101
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_write_str4bit>
 660:	da cf       	rjmp	.-76     	; 0x616 <main+0x76>
			}else{
				lcd_clear4bit();
 662:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_clear4bit>
				lcd_write_str4bit("failed xx");
 666:	8f e6       	ldi	r24, 0x6F	; 111
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_write_str4bit>
			}
			
		}
	
			i++;
    }
 66e:	d3 cf       	rjmp	.-90     	; 0x616 <main+0x76>

00000670 <strncmp>:
 670:	fb 01       	movw	r30, r22
 672:	dc 01       	movw	r26, r24
 674:	41 50       	subi	r20, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	30 f0       	brcs	.+12     	; 0x686 <strncmp+0x16>
 67a:	8d 91       	ld	r24, X+
 67c:	01 90       	ld	r0, Z+
 67e:	80 19       	sub	r24, r0
 680:	19 f4       	brne	.+6      	; 0x688 <strncmp+0x18>
 682:	00 20       	and	r0, r0
 684:	b9 f7       	brne	.-18     	; 0x674 <strncmp+0x4>
 686:	88 1b       	sub	r24, r24
 688:	99 0b       	sbc	r25, r25
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
